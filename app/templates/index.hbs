{{page-title "A How-To Guide"}}

<p class="text-2xl">
  This guide intends to help Ember developers make more accessible choices for their applications from day one. You will learn how to create your app, which addons to use, and what you or your team might need to consider along the way.
</p>

<EaCallout>
<p>Note: Sometimes there are ways to reach accessibility conformance that will be different from what you read here. It should not be assumed that one approach is wrong and one is right; instead, consider the intent. For each item here, I will endeavor to include reasoning; if you are required to take a different approach, you can still try to reach the same outcome. Still unsure what to do? Ask in the #topic-a11y channel on the Ember Discord server!</p>
</EaCallout>

<h2 id="section-new-app" class="pt-0"><a href="#section-new-app">&sect;</a> Starting A New App</h2>

<p>Let's go through the commands to get your brand new app off on the right foot. Did you know that assistive technology needs to know what language your page is? By default, most screen readers will take the operating system's language- but that doesn't mean the websites you visit will be in the same language! So, let's make sure it gets defined for the whole app at least once.
</p>

<p>First, when you generate your app's files, use the <code>lang</code> flag to set a default language:
</p>

<div class="w-full text-xl py-4">
<CodeBlock
@language="bash"
id="start-new-app"
@code="$ ember new fluffy-cat-website --lang en"/>
</div>

<p>And just like that, your website now passes <a href="https://www.w3.org/WAI/WCAG21/quickref/#page-titled" rel="external">WCAG Success Criterion 2.4.2: Page Titled</a>.If you are building an Ember app, chances are you might want to add internationalization. Check out the <a href="https://github.com/ember-intl/ember-intl" rel="external">ember-intl</a> addon for ways to do that.</p>

<EaDivider />

<h2 id="new-app-layout"><a href="#new-app-layout">&sect;</a> Application Layout</h2>
<p>A common but avoidable issue: the application layout is not considered in advance from a code perspective. Did you know that when you use landmark regions like <code>&lt;main></code>, assistive technology like screenreaders will allow users to navigate a page more easily? When all page content is <a href="https://dequeuniversity.com/rules/axe/4.3/region?application=AxeChrome" rel="external">contained by landmarks</a>, it provides the markup that the screen reader needs so it can improve the user experience.</p>

<p>I like to set my app's layout in my <code>application.hbs</code> file, because it makes me think about layout from the very start, and work within the constraints I've given myself. Plus, as I add content to other route (page) templates, I don't even have to worry about whether or not the content is contained! The markup in the <code>application.hbs</code> file is applied to all routes within your app.</p>

<p>The template looks something like this:</p>

<div class="w-full text-xl py-4">
  <CodeBlock
  @language="handlebars"
  id="application-landmarks-components"
  @code="&lt;AppHeader />
&lt;main id=&quot;main&quot;>
  &lbrace;&lbrace;outlet&rbrace;&rbrace;
&lt;/main>
&lt;AppFooter />" />
</div>

<p>Of course, if you don't use a header and footer custom component, you could add them directly to your application template:</p>
<div class="w-full text-xl py-4">
  <CodeBlock
  @language="handlebars"
  id="application-landmarks"
  @code="&lt;header>
  &lt;h1>My Fluffy Cat&lt;/h1>
&lt;/header>
&lt;main id=&quot;main&quot;>
  &lbrace;&lbrace;outlet&rbrace;&rbrace;
&lt;/main>
&lt;footer>
  &lt;p>&copy;2021 Fluffy Cat Owners LLC&lt;/p>
&lt;/footer>" />
</div>

<EaDivider />
<h2 id="section-page-title">
  <a href="section-page-title">&sect;</a> Page Titles
</h2> 

<p>Now that we have an application layout, we need to think a bit about our page titles. This information helps the user know where they are within the application, and helps our app meet <a href="https://www.w3.org/WAI/WCAG21/Understanding/page-titled.html" rel="external">WCAG Success Criteria 2.4.2: Page Titled</a>. </p>

<p>You'll want to plan your app's content and plan your routes accordingly. The bonus here is that you'll also be planning your breadcrumbs!</p>

<EaCallout>
  <p>If you want to better understand information architecture, read <a href="https://abookapart.com/products/everyday-information-architecture" rel="external">Everyday Information Architecture</a> by Lisa Maria Marquis.</p>
</EaCallout>

<p>
  The <code>ember-page-title</code> addon is included in all new Ember apps by default, and it will automatically add the route name as the page title value.
</p>

<div class="w-full text-xl py-4">
  <CodeBlock
  @language="handlebars"
  id="page-title-default"
  @code="&lbrace;&lbrace;page-title &quot;Index&quot;&rbrace;&rbrace;" />
</div>

<p>Of course, "Index" isn't really a meaningful page title, so make sure to update it to reflect the actual content or purpose of the page.</p>

<div class="w-full text-xl py-4">
  <CodeBlock
  @language="handlebars"
  id="page-title-meaningful"
  @code="&lbrace;&lbrace;page-title &quot;A How-To Guide&quot;&rbrace;&rbrace;" />
</div>

<p>There are a lot of customizable options, so make sure to check out all of the <a href="https://github.com/ember-cli/ember-page-title" rel="external">options in the documentation</a>.</p>

<EaDivider />
<h2 id="section-routing"><a href="#section-routing">&sect;</a> Accessible Routing</h2>
<p>Here are three common problems present in many single-page applications:
  <ol>
    <li>When the route transition happens, new content is not automatically read by screen readers. (Want a deep dive? <a href="https://github.com/MelSumner/ember-a11y-roadmap/tree/master/rfc-research/router" rel="external">read some research</a>!)</li>
    <li>When a route transition occurs (e.g., a user goes from one page to another), the focus is not reset.</li>
    <li>A skiplink is missing. Apps need a <a href="https://www.w3.org/TR/WCAG20-TECHS/G1.html" rel="external">bypass mechanism</a> that links directly to the main content.</li>
  </ol>
</p>
<h3>How to fix these routing issues</h3>
<p>It will be unsurprising that there are addons for this, but only one addon provides an answer to all three of these issues at once: <a href="https://github.com/ember-a11y/ember-a11y-refocus" rel="external">ember-a11y-refocus</a>.</p>

<p>To use the addon, install it in your app. If you are using npm, run:</p>
<div class="w-full text-xl py-4">
  <CodeBlock
  @language="bash"
  id="install-ember-a11y-refocus-npm"
  @code="$ npm install --save-dev ember-a11y-refocus" />
</div>

<p>If you are using yarn:</p>
<div class="w-full text-xl py-4">
  <CodeBlock
  @language="bash"
  id="install-ember-a11y-refocus-yarn"
  @code="$ yarn add -D ember-a11y-refocus" />
</div>

<p>Then, add the <code>&lt;NavigationNarrator/></code> component just inside the app's header:</p>

<div class="w-full text-xl py-4">
  <CodeBlock
  @language="markup"
  id="use-ember-a11y-refocus"
  @code="&lt;header>
  &lt;NavigationNarrator/>
  &lt;h1>Building Accessible Ember Applications&lt;/h1>
&lt;/header>" />
</div>

<p>Remember how we added an <code>id</code> attribute to the <code>main</code> when we were setting up the app layout? Well, the skiplink is wired up by default to go directly to the main, skipping the header and any navigation it contains. In true Ember fashion, strong defaults are provided but you can totally customize it to fit your app's needs!
</p>
<p>For a full list of customizable options, visit the repo's <a href="https://github.com/ember-a11y/ember-a11y-refocus#options">options section</a> in the documentation.</p>

<h3>Other Routing options</h3>
<p>While other routing addons are not as fully-featured or unobtrusive, your app might need something different. If that's the case, here are some other Ember addons for you to consider: 
  <ol>
    <li><a href="https://github.com/ember-a11y/ember-a11y" rel="external">ember-a11y</a></li>
    <li><a href="https://github.com/linkedin/self-focused/tree/master/packages/ember-self-focused" rel="external">ember-self-focused</a></li>
    <li><a href="https://github.com/ember-a11y/a11y-announcer" rel="external">a11y-announcer</a></li>
  </ol>
</p>

<EaDivider />
<h2 id="section-linting-and-testing"><a href="#section-linting-and-testing">&sect;</a> Linting and Testing (WIP)</h2>
<p>Another important way of setting your app up for success is to use linting and testing.</p>

<h3>Linting</h3>
<p>The <a href="https://github.com/ember-template-lint/ember-template-lint" rel="external">ember-template-lint</a> addon is included with all new Ember apps by default, and there are 26 rules (and counting!) that specifically check for potential accessibility conformance issues.</p>

<p>Now, in some cases, you might find a conflict with the way you write your code and the rule that is telling you that there is an error. Here's my advice for that: don't take our word for it! We wrote these linting rules according to the spec, but <em>sometimes</em> you'll need a workaround. In these cases, you can <a href="https://github.com/ember-template-lint/ember-template-lint/blob/master/docs/configuration.md#per-template-file" rel="external">disable the rule inline</a>, just note that this really should be a rare exception!
</p>

<p>The <code>ember-template-lint</code> addon has a lot of options, so make sure to read through the documentation!</p>

{{!-- Include info about todo feature and how to make sure all of the a11y-related linting rules are turned on, as well as when to use the escape valve for linting rules. --}}

<h3>Testing</h3>
<p>Ember has you covered here too! For accessibility issues that can be tested for <a href="https://a11y-automation.dev" rel="external">in an automated fashion</a>, you can use the <a href="https://github.com/ember-a11y/ember-a11y-testing" rel="external">ember-a11y-testing</a> add-on.</p>

<p>
Of course, we can only automate a small number of accessibility checks, so developers must become comfortable with writing their own. One useful way to do this is to use the <a href="https://github.com/simplabs/qunit-dom" rel="external">qunit-dom</a> add-on, which will allow you to write tests that target specific attributes in your code- in this case, accessibility attributes.
</p>
<p>
  Let's say that you want to write a test to see if <code>aria-hidden</code> is working the way you expect. You can write an integration test for your component that looks something like this: 
</p>

<div class="w-full text-xl py-4">
  <CodeBlock
  @language="handlebars"
  id="testing-example-aria-hidden"
  @code="test('it has aria-hidden set to true', async function (assert) {
    await render(hbs`&lt;FlightIcon @name=&quot;activity&quot; /&gt;`);
    assert
      .dom('svg.flight-icon.flight-icon-activity.flight-icon-display-inline')
      .hasAria('hidden', 'true');
  });" />
</div>

<p>The <a href="https://github.com/simplabs/qunit-dom/blob/master/API.md">full API is available</a> in the repository.</p>


<EaDivider />
<h2 id="section-focus-management">
  <a href="#section-focus-management">&sect;</a> Focus Management
</h2>
<p>Focus determines which part of your application receives events from the keyboard and clipboard at any given time. Good focus management can provide a better experience for all of your users, but is particularly critical for those who may navigate exclusively via their keyboard or other input device, such as a switch device.</p>

<h3>Included in the browser</h3>
<p>Browsers come with built-in focus behavior based on the type of elements used. Interactive elements like buttons and input fields are implicitly focusable, which means that they are automatically inserted into the tab order of the page and come with built-in event handling.</p>
<p>Non-interactive elements purposely do not receive focus without developer intervention, because no action from the user is expected. In Ember, we help you stay on the well-lit path and disallow interactivity on non-interactive elements, through the no-invalid-interactive rule in <a href="https://github.com/ember-template-lint/ember-template-lint" rel="external">ember-template-lint</a>.</p>

<h3>Screenreaders: browsing mode vs focus mode</h3>
<p>Screenreaders offer users different ways of navigating your web app; the most common modes are <em>browse</em> and <em>focus</em>.</p>
<p>In browse mode, users can place the screen reader cursor on any element in a webpage, including those which are not focusable. This is possible because the screen reader cursor (or focus) is distinct from the visible focus you can see in the browser. The screen reader intercepts keystrokes and uses them to control sophisticated navigation between elements, such as jumping between heading elements using the <code>H</code> key or links by pressing <code>K</code>.</p>
<p>It's not possible, however, to interact with the page while in browse mode. Instead, users can switch to focus mode which will pass keystrokes directly to the browser. Navigation in focus mode behaves like keyboard-only navigation (<code>Tab</code> will jump to the next focusable element, or <code>Shift</code> + <code>Tab</code> to the previous).</p>

<h3>Focus Order</h3>
<p><a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html" rel="external">Focus order</a> is an important part of ensuring that your Ember application is accessible. As such, it's vital that focus behavior is logical and predictable, providing <a href="https://www.w3.org/WAI/WCAG21/Understanding/meaningful-sequence.html" rel="external">meaningful sequence</a>. This can require extra care when user interaction modifies the tabbable order of elements, such as by opening or closing a modal. In the case of a modal, focus should move to an element inside the modal while open (and not be permitted to reach the page below). Conversely, closing the modal should revert focus back to the originating element that triggered opening it. </p>
<h3>How focus works in Ember</h3>
<p>Coming soon!</p>

<h3>Helpful Addons </h3>
<p>
  <ol>
    <li><a href="https://github.com/ember-a11y/ember-component-focus" rel="external">ember-component-focus</a></li>
    <li><a href="https://github.com/melsumner/e-a11y-modal" rel="external">e-a11y-modal</a></li>
  </ol>
</p>


{{!-- 
<EaDivider />
<h2 id="section-forms">
  <a href="section-forms">&sect;</a> Forms
</h2> 
<p>Coming Soon!</p> --}}
{{!-- <p>Things to include:
  <ol>
    <li>unique-id helper</li>
    <li>associating labels and form inputs</li>
    <li>ember-simple-select</li>
    <li>form guidance (ECP)</li>
  </ol>
</p> 
--}}

{{!-- 
<EaDivider />
<h2 id="section-resources">
  <a href="section-resources">&sect;</a> Helpful Resources
</h2>
--}}

<EaDivider />
<h2 id="section-coming-soon">
  <a href="section-coming-soon">&sect;</a> Coming Soon
</h2>
<p>
  <ol>
    <li>Focus Management</li>
    <li>Forms</li>
    <li>A Basic Checklist for Code</li>
    <li>Helpful Resources</li>
  </ol>
</p>

{{!-- 
<EaDivider />
<h2 id="">
  <a href="">&sect;</a> Section Title
</h2> 
--}}

